<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trifiblog</title>
    <link>https://trifiblog.com</link>
    <atom:link href="https://trifiblog.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>A blog of a software engineer</description>
    <language>en-gb</language>
    <pubDate>Wed, 25 Aug 2021 22:18:22 +0300</pubDate>
    <lastBuildDate>Wed, 25 Aug 2021 22:18:22 +0300</lastBuildDate>

    <item>
      <title>How to create a blog quickly using JBake and GitHub Pages</title>
      <link>https://trifiblog.com/blog/2021/first_post.html</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0300</pubDate>
      <guid isPermaLink="false">blog/2021/first_post.html</guid>
      	<description>
	&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_some_initial_requirements&quot;&gt;Some Initial Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_uber_fails&quot;&gt;Uber Fails&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_jbake_native&quot;&gt;JBake &quot;native&quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_gradle_plugin&quot;&gt;Gradle Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_maven_to_the_rescue&quot;&gt;Maven to the rescue!&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_1_create_a_new_maven_project&quot;&gt;1. Create a new Maven project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_2_add_the_jbake_maven_build_configuration&quot;&gt;2. Add the JBake Maven build configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_3_generate_initial_site_structure&quot;&gt;3. Generate initial site structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_4_serve_site_locally&quot;&gt;4. Serve site locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_5_publish_to_github_pages&quot;&gt;5. Publish to GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_extras&quot;&gt;Extras&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_custom_domain&quot;&gt;Custom domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_jbake_watch_issue&quot;&gt;JBake watch issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is so meta, but for my first post I wanted to write about the way I created this blog.
You can find the repository of this blog here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/atrifyllis/trifiblog&quot;&gt;Trifiblog repository&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic familiarity with Maven&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A GitHub account&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_some_initial_requirements&quot;&gt;Some Initial Requirements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main requirements for this project was a fast and easy way to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;write blog posts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generate a static site from the posts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;publish the blog online&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Subjectively, the easiest way to write technical documentation is &lt;a href=&quot;https://asciidoctor.org/&quot;&gt;Asciidoc(tor)&lt;/a&gt;, so we decided that writing the blog posts in Asciidoc was a no-brainer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started looking at &lt;a href=&quot;https://jbake.org/&quot;&gt;JBake&lt;/a&gt; for the static site generator. Especially if you are familiar with the whole Java ecosystem it makes sense to stick with it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, publishing a site that resides in a GitHub repository through &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; is really straight-forward. There is not even any need for CI builds (if you don&amp;#8217;t want to), whatever is inside the &lt;code&gt;/docs&lt;/code&gt; folder of the repository is getting published!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_uber_fails&quot;&gt;Uber Fails&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you don&amp;#8217;t want to read about the initial failures, you can skip directly to &lt;a href=&quot;#_maven_to_the_rescue&quot;&gt;the solution that worked for me&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_jbake_native&quot;&gt;JBake &quot;native&quot;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first roadblock we hit was when we tried to use JBake directly in a Windows laptop. It seems relevant to this issue:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jbake-org/jbake/issues/655&quot; class=&quot;bare&quot;&gt;https://github.com/jbake-org/jbake/issues/655&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Setting the  destination folder of the JBake generated site was a hard requirement, since we needed it to be the &lt;code&gt;/docs&lt;/code&gt; folder of the repository.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_gradle_plugin&quot;&gt;Gradle Plugin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next attempt was the &lt;a href=&quot;https://github.com/jbake-org/jbake-gradle-plugin&quot;&gt;Gradle plugin&lt;/a&gt; for JBake. This is where we hit the second roadblock. There were several kinds of exceptions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, when trying to run the &lt;code&gt;bakePreview&lt;/code&gt; Gradle task I was getting the following exception:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Cannot set readonly property: level for class: org.gradle.internal.logging.services.DefaultLoggingManager&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_maven_to_the_rescue&quot;&gt;Maven to the rescue!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The final and successful attempt was to use the &lt;a href=&quot;https://github.com/jbake-org/jbake-Maven-plugin&quot;&gt;JBake Maven plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are the steps that worked for me:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_1_create_a_new_maven_project&quot;&gt;1. Create a new Maven project&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example in IntelliJ this can be done from the new project wizard.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_2_add_the_jbake_maven_build_configuration&quot;&gt;2. Add the JBake Maven build configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add in the pom.xml file the following build configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt; &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.jbake&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;jbake-Maven-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;0.3.5&amp;lt;/version&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;outputDirectory&amp;gt;./docs&amp;lt;/outputDirectory&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                &amp;lt;/configuration&amp;gt;
                &amp;lt;executions&amp;gt;
                    &amp;lt;execution&amp;gt;
                        &amp;lt;id&amp;gt;default-generate&amp;lt;/id&amp;gt;
                        &amp;lt;phase&amp;gt;generate-resources&amp;lt;/phase&amp;gt;
                        &amp;lt;goals&amp;gt;
                            &amp;lt;goal&amp;gt;generate&amp;lt;/goal&amp;gt;
                        &amp;lt;/goals&amp;gt;
                    &amp;lt;/execution&amp;gt;
                &amp;lt;/executions&amp;gt;
                &amp;lt;dependencies&amp;gt;
                    &amp;lt;!-- include required dependencies here, see below --&amp;gt;
                    &amp;lt;dependency&amp;gt;
                        &amp;lt;groupId&amp;gt;org.asciidoctor&amp;lt;/groupId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                        &amp;lt;artifactId&amp;gt;asciidoctorj&amp;lt;/artifactId&amp;gt;
                        &amp;lt;version&amp;gt;2.4.3&amp;lt;/version&amp;gt;
                    &amp;lt;/dependency&amp;gt;
                    &amp;lt;dependency&amp;gt;
                        &amp;lt;groupId&amp;gt;org.freemarker&amp;lt;/groupId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                        &amp;lt;artifactId&amp;gt;freemarker&amp;lt;/artifactId&amp;gt;
                        &amp;lt;version&amp;gt;2.3.31&amp;lt;/version&amp;gt;
                    &amp;lt;/dependency&amp;gt;
                    &amp;lt;dependency&amp;gt;
                        &amp;lt;groupId&amp;gt;com.sparkjava&amp;lt;/groupId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
                        &amp;lt;artifactId&amp;gt;spark-core&amp;lt;/artifactId&amp;gt;
                        &amp;lt;version&amp;gt;2.9.3&amp;lt;/version&amp;gt;
                    &amp;lt;/dependency&amp;gt;
                &amp;lt;/dependencies&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the latest version of JBake Maven plugin.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The output folder must be the one that is published from GitHub Pages(&lt;code&gt;/docs&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add asciidoctor Maven dependency since we want to write the blog posts in asciidoc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the templating engine of our choice (in this case using the &lt;a href=&quot;https://jbake.org/docs/2.6.7/#initialisation_command&quot;&gt;default&lt;/a&gt; which is freemarker)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add latest spark-core dependency to avoid an issue with the jbake:inline goal. More about this issue &lt;a href=&quot;#_jbake_watch_issue&quot;&gt;later&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_3_generate_initial_site_structure&quot;&gt;3. Generate initial site structure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Maven plugin provides a goal that seeds the project/site with example content and templates. This is a good starting point. Run the following in a CLI window:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;mvn jbake:seed&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will create an initial structure inside &lt;code&gt;src/main/jbake&lt;/code&gt; folder where the site will be generated from. The structure looks similar to this (click image for actual size):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;/img/jbake_folder_structure.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;/img/jbake_folder_structure.jpg&quot; alt=&quot;Structure&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The blog posts and pages that we create will reside inside &lt;code&gt;content/blog&lt;/code&gt; directory.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_4_serve_site_locally&quot;&gt;4. Serve site locally&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Maven plugin provides a goal to serve the site locally. This goal will watch for any changes and will also re-generate the site (in &lt;code&gt;/docs&lt;/code&gt; folder). This way we can 1) see the changes in the browser immediately, 2) push the &lt;code&gt;/docs&lt;/code&gt; folder in GitHub to publish the site automatically (more on that later).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run the following command from a CLI window:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;mvn jbake:inline&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check the output for a similar line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[INFO] Started ServerConnector@47cdf91a{HTTP/1.1, (http/1.1)}{127.0.0.1:8820}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that in our local environment the site is accessible under the port 8802 and if we navigate to &lt;code&gt;&lt;a href=&quot;http://localhost:8820&quot; class=&quot;bare&quot;&gt;http://localhost:8820&lt;/a&gt;&lt;/code&gt; we can see the sample blog content as generated by JBake.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_5_publish_to_github_pages&quot;&gt;5. Publish to GitHub Pages&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can of course delete all sample posts (maybe replacing the about page with our own). When we are ready to publish we need to link the local project with a GitHub repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Intellij go to menu Git  &amp;gt; GitHub &amp;gt; Share Project on GitHub. This implies that we have a GitHub account, and we have linked it with Intellij previously (out of scope for this article).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This how the GitHub repository should look like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/jbake_github_structure.jpg&quot; alt=&quot;GitHub&quot; width=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we navigate to GitHub repository Settings &amp;gt; Pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we have to make the repository public if is not already.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we select in the Source section the &lt;code&gt;master&lt;/code&gt; branch and the &lt;code&gt;/docs&lt;/code&gt; folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For our repository this is how the Pages page looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/jbake_github_pages.jpg&quot; alt=&quot;jbake github pages&quot; width=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we save these changes, after a small delay we are able to browse our blog under:
&lt;code&gt;&amp;lt;username&amp;gt;.github.com/&amp;lt;repository_name&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Congratulations!&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That is all! We now have our own blog published!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_extras&quot;&gt;Extras&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_custom_domain&quot;&gt;Custom domain&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we have a domain name or planning to buy one, there are some more steps involved to link the GitHub pages with our domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the work involved has to be done in whatever domain provider we are using, so it is out of scope for this article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nevertheless, this is what was needed for this particular case:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Add the domain name in Pages settings without a subdomain (for example &lt;code&gt;trifiblog.com&lt;/code&gt; not &lt;code&gt;www.trifiblog.com&lt;/code&gt;). This will create a new commit in our repository with a CNAME file with the following content:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;trifiblog.com&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We navigate to the domain name provider web interface and try to find a way to change the DNS settings. In our case, we needed to add the following entries:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/jbake_github_dns_entries.jpg&quot; alt=&quot;jbake github dns entries&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first four highlighted entries are &lt;code&gt;A&lt;/code&gt; records that point to the IP addresses for GitHub Pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other highlighted entry is a &lt;code&gt;CNAME&lt;/code&gt; record that points the &lt;code&gt;www.trifiblog.com&lt;/code&gt; to the apex domain &lt;code&gt;trifiblog.com&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This last entry, take it with a grain of salt. This is &lt;strong&gt;not&lt;/strong&gt; the way that GitHub recommends to set up apex and www domains together, so it is better to follow the official docs.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For mor information about custom domains and GitHub pages please check the &lt;a href=&quot;https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site&quot;&gt;official GitHub documentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_jbake_watch_issue&quot;&gt;JBake watch issue&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JBake Maven plugin provides a Maven goal &lt;code&gt;jbake:inline&lt;/code&gt; for the first time, which bakes (= generates the site), watches and serves out content locally. WhenI tried running it for the first time, and tried changing a post to test the watch mode we got the following exception:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;...
java.io.FileNotFoundException: C:\dev\WORSKPACE\JBAKE\triblog-Maven\docs\js\bootstrap.min.js (The requested operation cannot be performed on a file with a user-mapped section open)
at java.io.FileOutputStream.open0 (Native Method)
at java.io.FileOutputStream.open (
...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jbake-org/jbake/issues/466#issuecomment-476161490&quot;&gt;This&lt;/a&gt; reply on the JBake GitHub issues helped me understand that the issue was the outdated spark-core dependency, which depends on an older Jetty version. So adding an explicit dependency to the latest spark-core (seems to) have solved the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
